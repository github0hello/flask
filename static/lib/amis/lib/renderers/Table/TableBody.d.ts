import React from 'react';
import { ClassNamesFn, RendererEvent } from 'amis-core';
import { SchemaNode, ActionObject } from 'amis-core';
import { LocaleProps } from 'amis-core';
import { ActionSchema } from '../Action';
import type { IColumn, IRow, ITableStore } from 'amis-core';
export interface TableBodyProps extends LocaleProps {
    store: ITableStore;
    className?: string;
    rowsProps?: any;
    tableClassName?: string;
    classnames: ClassNamesFn;
    columns: Array<IColumn>;
    rows: Array<IRow>;
    render: (region: string, node: SchemaNode, props?: any) => JSX.Element;
    renderCell: (region: string, column: IColumn, item: IRow, props: any) => React.ReactNode;
    onCheck: (item: IRow, value: boolean, shift?: boolean) => void;
    onRowClick: (item: IRow, index: number) => Promise<RendererEvent<any> | void>;
    onRowDbClick: (item: IRow, index: number) => Promise<RendererEvent<any> | void>;
    onRowMouseEnter: (item: IRow, index: number) => Promise<RendererEvent<any> | void>;
    onRowMouseLeave: (item: IRow, index: number) => Promise<RendererEvent<any> | void>;
    onQuickChange?: (item: IRow, values: object, saveImmediately?: boolean | any, savePristine?: boolean) => void;
    footable?: boolean;
    ignoreFootableContent?: boolean;
    footableColumns: Array<IColumn>;
    checkOnItemClick?: boolean;
    buildItemProps?: (item: IRow, index: number) => any;
    onAction?: (e: React.UIEvent<any>, action: ActionObject, ctx: object) => void;
    rowClassNameExpr?: string;
    rowClassName?: string;
    affixRowClassName?: string;
    prefixRowClassName?: string;
    data?: any;
    prefixRow?: Array<any>;
    affixRow?: Array<any>;
    itemAction?: ActionSchema;
}
export declare class TableBody extends React.Component<TableBodyProps> {
    componentDidMount(): void;
    renderRows(rows: Array<any>, columns?: ({
        label: any;
        type: string;
        name: string | undefined;
        value: any;
        id: string;
        groupName: string;
        toggled: boolean;
        toggable: boolean;
        expandable: boolean;
        checkdisable: boolean;
        searchable: any;
        enableSearch: boolean;
        sortable: boolean;
        filterable: any;
        fixed: string;
        index: number;
        rawIndex: number;
        width: number;
        minWidth: number;
        realWidth: number;
        breakpoint: any;
        pristine: any;
        remark: any;
        className: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        readonly isPrimary: boolean;
    } & {
        toggleToggle(min?: number | undefined): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
        setMinWidth(value: number): void;
        setWidth(value: number): void;
        setRealWidth(value: number): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        label: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        type: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        name: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        value: import("mobx-state-tree").IType<any, any, any>;
        id: import("mobx-state-tree").IType<string | undefined, string, string>;
        groupName: import("mobx-state-tree").IType<string | undefined, string, string>;
        toggled: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        toggable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        expandable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        checkdisable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        searchable: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IType<any, any, any>>;
        enableSearch: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        sortable: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        filterable: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        fixed: import("mobx-state-tree").IType<string | undefined, string, string>;
        index: import("mobx-state-tree").IType<number | undefined, number, number>;
        rawIndex: import("mobx-state-tree").IType<number | undefined, number, number>;
        width: import("mobx-state-tree").IType<number | undefined, number, number>;
        minWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
        realWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
        breakpoint: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        pristine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        remark: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IType<any, any, any>, [undefined]>;
        className: import("mobx-state-tree").ITypeUnion<any, any, any>;
    }, {
        readonly isPrimary: boolean;
    } & {
        toggleToggle(min?: number | undefined): void;
        setToggled(value: boolean): void;
        setEnableSearch(value: boolean): void;
        setMinWidth(value: number): void;
        setWidth(value: number): void;
        setRealWidth(value: number): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>)[], rowProps?: any): any;
    renderSummaryRow(position: 'prefix' | 'affix', items: Array<any>, rowIndex?: number): React.JSX.Element | null;
    renderSummary(position: 'prefix' | 'affix', items?: Array<any>): React.JSX.Element | (React.JSX.Element | null)[] | null;
    render(): React.JSX.Element;
}
